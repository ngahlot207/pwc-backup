public class SaveApplicantGSTData {
    @AuraEnabled
    public static void saveApplicantFinancialData(String data) {
        system.debug('saveApplicantFinancialData data::'+data);
        List<Applicant_Financial__c> financialRecords = new List<Applicant_Financial__c>();
        List<Applicant_Financial_Summary__c> summaryRecords = new List<Applicant_Financial_Summary__c>();
        
        List<Map<String, Object>> parsedData = new List<Map<String, Object>>();
          /*          for (Object obj : data) {
                if (obj instanceof Map<String, Object>) {
                    parsedData.add((Map<String, Object>) obj);
                } else {
                    throw new AuraHandledException('Invalid data format');
                }
            }

        for (Map<String, Object> dataItem : parsedData) {
            // Get the parentRecord and childRecords
            Map<String, Object> parentRecordMap = (Map<String, Object>) dataItem.get('parentRecord');
            List<Map<String, Object>> childRecords = (List<Map<String, Object>>) dataItem.get('ChildReords');

            // Construct the Applicant_Financial__c object
            Applicant_Financial__c financialRecord = new Applicant_Financial__c();
            financialRecord.Id = (String) parentRecordMap.get('Id');
            financialRecord.Loan_Application__c = (String) parentRecordMap.get('Loan_Application__c');
            financialRecord.Applicant_GST__c = (String) parentRecordMap.get('Applicant_GST__c');
            financialRecord.Loan_Applicant__c = (String) parentRecordMap.get('Loan_Applicant__c');
            financialRecord.RecordTypeId = (String) parentRecordMap.get('RecordTypeId');

            financialRecords.add(financialRecord);

            // Loop through Applicant_Financial_Summary_s__r (if present) and add them
            if (parentRecordMap.containsKey('Applicant_Financial_Summary_s__r')) {
                List<Map<String, Object>> summaries = (List<Map<String, Object>>) parentRecordMap.get('Applicant_Financial_Summary_s__r');
                for (Map<String, Object> summaryMap : summaries) {
                    Applicant_Financial_Summary__c summaryRecord = new Applicant_Financial_Summary__c();
                    summaryRecord.Applicant_Financial__c = (String) parentRecordMap.get('Id');
                    summaryRecord.GST_Month_Year__c = (String) summaryMap.get('GST_Month_Year__c');
                    summaryRecord.Financial_Year__c = (String) summaryMap.get('Financial_Year__c');
                    summaryRecord.DueDt__c = (summaryMap.get('DueDt__c') != null) ? Date.valueOf((String) summaryMap.get('DueDt__c')) : null;
                    summaryRecord.FilingDate__c = (summaryMap.get('FilingDate__c') != null) ? Date.valueOf((String) summaryMap.get('FilingDate__c')) : null;
                    summaryRecord.DelayedDays__c = (summaryMap.get('DelayedDays__c') != null) ? Integer.valueOf((String) summaryMap.get('DelayedDays__c')) : null;

                    summaryRecords.add(summaryRecord);
                }
            }
        }

        // Insert or update the records in DML operations
        if (!financialRecords.isEmpty()) {
            upsert financialRecords;
        }
        if (!summaryRecords.isEmpty()) {
            upsert summaryRecords;
        }*/
    }
    
    //
//Generated by AdminBooster
//

	class clsparentRecord {
		public String Id;	//a0cC4000000OhF7IAK
		public String LoanApplicationId;	//a08C4000009C0C1IAK
		public String ApplicantGST;	//a0jC4000000Ni5BIAS
		public String LoanApplicantId;	//a0AC4000000OodBMAS
		public String RecordTypeId;	//012C4000000ZhrhIAC
		public ApplicantFinancialSummary[] ApplicantFinancialSummary;
	}
	class ApplicantFinancialSummary {
		public String GSTMonthYear;	//September - 2024
		public String FinancialYear;	//2024-2025
		public String DueDt;	//
		public String FilingDate;	//
		public String DelayedDays;	//
		public Integer Index;	//1
		public String Type;	//Filing Details - GSTR 3B
	}
}